@model ClientApp.Models.AcsTokenModel

@{
    ViewData["Title"] = "Video Call";
}

<h4>Video Call</h4>
<hr />

<div class="mb-3">
    <button id="start-call-button" class="btn btn-success">Start Call</button>
    <button id="hang-up-button" class="btn btn-danger" disabled>Hang Up</button>
</div>

<div class="row">
    <div class="col-md-6">
        <h5>My Video</h5>
        <div id="localVideo" style="width:100%; height:250px; background-color:#f0f0f0; border: 1px solid #ccc;"></div>
    </div>
    <div class="col-md-6">
        <h5>Doctor's Video</h5>
        <div id="remoteVideo" style="width:100%; height:250px; background-color:#f0f0f0; border: 1px solid #ccc;"></div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/@@azure/communication-calling@1.22.1/dist/communication-calling.js"></script>

    <script>
        // Get elements from the page
        const startCallButton = document.getElementById('start-call-button');
        const hangUpButton = document.getElementById('hang-up-button');
        const localVideoContainer = document.getElementById('localVideo');
        const remoteVideoContainer = document.getElementById('remoteVideo');

        // Get token and user details from the model passed by the controller
        const tokenCredential = { token: '@Model.Token' };
        const acsUserId = '@Model.AcsUserId';
        const groupId = '@Model.GroupId.ToString()';

        let callAgent;
        let call;
        let deviceManager;
        let localVideoStream;
        let renderer;

        async function initialize() {
            try {
                const { CallClient } = window.AzureCommunicationCalling;
                const callClient = new CallClient();

                const tokenResponse = new Azure.Core.AccessToken(tokenCredential.token, new Date(Date.now() + 3600 * 1000));
                const credential = new Azure.Communication.common.CommunicationUserCredential(tokenResponse);

                callAgent = await callClient.createCallAgent(credential, { displayName: 'Patient' });
                deviceManager = await callClient.getDeviceManager();

                startCallButton.disabled = false;
            } catch (error) {
                console.error("Initialization failed:", error);
            }
        }

        startCallButton.addEventListener("click", async () => {
            try {
                const cameras = await deviceManager.getCameras();
                if (cameras.length > 0) {
                    localVideoStream = new AzureCommunicationCalling.LocalVideoStream(cameras[0]);
                    const view = await new AzureCommunicationCalling.VideoStreamRenderer(localVideoStream).createView();
                    localVideoContainer.appendChild(view.target);
                }

                const callOptions = {
                    videoOptions: { localVideoStreams: [localVideoStream] },
                    audioOptions: { muted: false }
                };

                call = callAgent.join({ groupId: groupId }, callOptions);

                call.on('remoteParticipantsUpdated', e => {
                    e.added.forEach(participant => {
                        participant.videoStreams.forEach(stream => {
                            renderRemoteStream(stream);
                        });
                    });
                });

                hangUpButton.disabled = false;
                startCallButton.disabled = true;
            } catch (error) {
                console.error("Starting call failed:", error);
            }
        });

        hangUpButton.addEventListener("click", async () => {
            await call.hangUp();
            hangUpButton.disabled = true;
            startCallButton.disabled = false;
            localVideoContainer.innerHTML = '';
            remoteVideoContainer.innerHTML = '';
        });

        async function renderRemoteStream(stream) {
            if (!stream.isAvailable) return;
            renderer = new AzureCommunicationCalling.VideoStreamRenderer(stream);
            const view = await renderer.createView();
            remoteVideoContainer.appendChild(view.target);

            stream.on('isAvailableChanged', async () => {
                if (stream.isAvailable) {
                    const view = await renderer.createView();
                    remoteVideoContainer.appendChild(view.target);
                } else {
                    remoteVideoContainer.innerHTML = '';
                }
            });
        }

        initialize();
    </script>
}